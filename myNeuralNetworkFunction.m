function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 08-Jan-2018 04:14:14.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [55;22;31;12];
  x1_step1_gain = [0.0470588235294118;0.0952380952380952;0.117647058823529;0.166666666666667];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [0.014638598170407918;-0.0034444794838031042;-0.021331000261126661;-0.0019140488963371965;-0.009833938543653678;0.011103839845128465;0.0042820870972154175;-0.013381405270922927;0.0095869323677963986;-0.0017694738057315736];
  IW1_1 = [-0.0094387456096692978 -0.024709075429821103 -0.0094387456105427935 -0.034609195775985549;-0.033020447757527931 0.0014999959948119861 -0.033020447758321886 -0.0021659342932196955;0.040474656698281326 -0.0061562313523083638 0.040474656697073286 -0.010293739666005575;0.057266234565672598 -0.0014876369512787351 0.057266234565232353 -0.058314998489566207;-0.049778093046463308 0.00015628164936084019 -0.049778093046967314 0.039330047731581219;0.0020959454239551758 0.0067733691066981247 0.0020959454246050131 0.071010587480362722;0.045308961451659517 -0.00064217240837063027 0.045308961451602132 -0.028561492523628516;0.035109146093514045 -0.0058484465434834555 0.035109146094200822 0.0010201285583462119;0.035120083569370693 0.00050633644551388904 0.035120083570184438 -0.0049581119074815798;0.015722592564277011 -0.0080795975503425901 0.01572259256324544 0.051790775039465532];
  
  % Layer 2
  b2 = 0.019191812763293372;
  LW2_1 = [-1.1516867245755784 -1.523944906507245 1.5732907847749225 1.6142539325380161 -1.5590848075965489 1.4100655449522546 1.5489038401908306 1.5540184267881487 1.5164464504713273 1.517315115051356];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 0.117647058823529;
  y1_step1_xoffset = 22;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
